#!/usr/bin/env zsh
#(FOR EDITOR FILE-TYPING ONLY)
#
# .zlogin is sourced in login shells.  It should
# contain commands that should be executed only in
# login shells.  It should be used to set the terminal
# type and run a series of external commands (fortune,
# msgs, from, etc).
##


#======================================
# Script Debugging
##

[[ $MYDEBUG -ge 1 ]] && print '[zlogin]'



#======================================
# Terminal Settings
#
# Set terminal type and any customizations (this may be in a separate file,
# which is sourced or not sourced (or substituted) by all subsequent shell
# invocations.
##




#======================================
# Any tmux(1), screen(1), or byobu(1) creation/reattachments, etc.
##




#======================================
# Security-Related Triggers
# File and user login watches
##


#======================================
# Configuration Repository
# Update or Init?
# Repository downloads/inits, updates.  Especially for configuration setups
# (aka, dotfiles). In fact, sensitive configuration settings must be encrypted
# before storing them anywhere, which brings us to the Decryption stage below.
# Remember: all good crypto vests security in it's keys.  Candidates include:
# AWS, GitHub and OAuth secrets, Developer IDs, and SSH and GnuPG keys
##




#======================================
# Cryptographic Operations
# Decrypt folders/files that contain sensitive data. Be sure to use srm(1)
# to erase the plaintext generated by this step. Remove before logging out
# with code in zlogout (zlogin's evil twin<smile>) AND by enabling a TRAP on
# every shell's SIGEXIT (TODO: check for other edge cases).
#
# Update certificate revocation lists
#


#======================================
# Virtual Machine environments and startup
##




#======================================
# Connection Setup
# connections to log servers, web monitors, IDS, and others.
##



#======================================
# Notices and Messages
# Only print motd, msgs and other such if we're a login shell *and*
# interactive! For example:
#
#   Date and Time
#   System uptime
#   last login
#   user logged on?
#   motd?
##

if [[ -o interactive ]]; then
  export TERM=xterm-256color
  #stty dec new cr0 -tabs
  #ttyctl -f  # freeze the terminal modes... can't change without a ttyctl -u
  #mesg y
  #print -P "%{%F{cyan}%}%D{[%F]}%{%f%}"
  #uptime
  #echo "Current Logins:\n$(who)\n"
  echo ""
  print -P "%{%F{cyan}%}\n$(fortune)\n%{%f%}"
  #from
  #cat notes
  #msgs -fp
fi


return 0
